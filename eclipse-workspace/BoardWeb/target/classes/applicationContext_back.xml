<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">

	<context:component-scan base-package="com.mire.biz"></context:component-scan>

	<aop:aspectj-autoproxy></aop:aspectj-autoproxy>
	
<!-- DataSource 등록  -->
	<context:property-placeholder location="classpath:db.properties"/>
	<bean id="dataSource" class="org.apache.tomcat.dbcp.dbcp2.BasicDataSource" destroy-method="close">
 		<property name="driverClassName" value="${jdbc.driverClassName}"/>
 		<property name="url"             value="${jdbc.url}"/>
 		<property name="username"        value="${jdbc.username}"/>
 		<property name="password"        value="${jdbc.password}"/>
 	</bean>	
 	
<!-- Spring과 JPA 연동 설정  -->
<bean id="jpaVendorAdapter" class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter"/>
<bean id="entityManagerFactoryBean" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
	<property name="dataSource" ref="dataSource"></property>
	<property name="jpaVendorAdapter" ref="jpaVendorAdapter"></property>
</bean>



<!-- Spring과 MyBatis 연동 설정  -->
 <bean id="sqlsession" class="org.mybatis.spring.SqlSessionFactoryBean">
 	<property name="configLocation" value="classpath:sql-map-config.xml"/>
 	<property name="dataSource" ref="dataSource"/>
 </bean>

<!-- Mybatis 추출기능 -->
	<bean class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg ref="sqlsession"/>
	</bean>
	
<!-- jdbcTemplate 등록 -->
   <!--  <bean class="org.springframework.jdbc.core.JdbcTemplate">
	    <property name="dataSource" ref="dataSource"/>
    </bean> -->
    
<!-- JDBC용 transaction 설정 -->
	<!-- <bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
  	<property name="dataSource" ref="dataSource"/>
  </bean> -->
  
<!-- JPA용 transaction 설정 -->  
	<bean id="txManager" class="org.springframework.orm.jpa.JpaTransactionManager">
  	<property name="dataSource" ref="dataSource"/>
  </bean>
 
   <tx:advice id="txAdvice" transaction-manager="txManager">
   	<tx:attributes>
    	<tx:method name="" rollback-for="Exception"/>
      </tx:attributes>
   	</tx:advice>

   <aop:config>
   <!-- expression에서/ *:리턴 / com~..:패키지 / *Impl:클래스 / .*:매서드 / (..):파라미터 -->
   	<aop:pointcut id="txPointcut" expression="execution( com.mire.biz..Impl.(..))"/>
    <aop:advisor pointcut-ref="txPointcut" advice-ref="txAdvice"/>
   </aop:config>

</beans>

<!--  5.aop
	<bean id="log" class="com.mire.biz.common.LogAdvice"></bean>
	<bean id="log2" class="com.mire.biz.common.LogAdvice2"></bean>
	<bean id="log3" class="com.mire.biz.common.AfterReturningAdvice"></bean>
	<bean id="log4" class="com.mire.biz.common.AfterThrowingAdvice"></bean>
	<bean id="log5" class="com.mire.biz.common.AroundAdvice"></bean>
	
	<aop:config>
	expression에서 *:리턴 com~..:패키지 *Impl:클래스 .*:매서드 (..):파라미터
		<aop:pointcut  id="allPointcut" expression="execution(* com.mire.biz..*Impl.*(..))"/>
		<aop:pointcut  id="getPointcut" expression="execution(* com.mire.biz..*Impl.get*(..))"/>
		
		<aop:aspect ref="log4">
			<aop:after-throwing method="afterThrowingLog" pointcut-ref="allPointcut" throwing="exception"/>
		</aop:aspect>
	</aop:config>
	 -->
	<!-- 
	<bean id="userServiceImpl" class="com.mire.biz.user.impl.UserServiceImpl">
		<property name="userDAO" ref="userDAO"></property>
	</bean>
	<bean id="userDAO" class="com.mire.biz.user.impl.UserDAO"></bean>
	
	 -->
<!-- injection을 이용한 객체 할당 
<bean id="userService" class="com.mire.biz.user.impl.UserServiceImpl">
		<property name="userDAO" ref="userDAO"></property>
	</bean>
	<bean id="userDAO" class="com.mire.biz.user.impl.UserDAO"></bean>
 -->



<!-- 어노테이션 사용시 패키지 경로 지정  
	<context:component-scan base-package="com.mire.biz"></context:component-scan>
	변수에 사용할 땐 가능하면 autowired만 사용

	<bean class="com.mire.biz.tv.SonySpeaker"></bean>

 -->


<!-- list set map properties에서 value 꺼내기 
<bean id="collectionBean" class="com.mire.ioc.injection.CollectionBean"> 
	<property name="addressList"> 
		<list> 
			<value>서울시 강남구 역삼동</value>
			<value>서울시	성동구 행당동</value> 
		</list> 
	</property> 
	<property name="addressSet"> 
		<set> 
			<value>서울</value> 
			<value>부산</value> 
		</set> 
	</property> 
	<property name="addressMap"> 
		<map> 
			<entry> 
				<key> 
					<value>서울</value> 
				</key>
					<value>추워</value> 
			</entry> 
			<entry> 
				<key> 
					<value>부산</value> 
				</key> 
					<value>따뜻해</value> 
			</entry> 
		</map> 
	</property> 
	<property name="addressProps"> 
		<props> 
			<prop key="추우면"> 좋아</prop> 
			<prop key="따뜻하면"> 더좋아</prop> 
		</props> 
	</property> 
</bean> -->


<!-- <bean id="ltv" class="com.mire.biz.tv.LgTV" scope="prototype" init-method="initMethod" 
	destroy-method="destoryMethod"/> -->
<!-- <bean id="stv" class="com.mire.biz.tv.SamsungTV" lazy-init="true"/> 
	content를 안넣으면 바로 "/>"닫아도 됌 -->


<!-- 1. IoC - setter Injection 
<bean id="stv" class="com.mire.biz.tv.SamsungTV"> 
	<property name="speaker" ref="sonySpeaker"></property>
	<property name="price" 	value="100000"></property> 
</bean> 
-->
<!-- 2. IoC - constructor Injection 
<bean id="stv" class="com.mire.biz.tv.SamsungTV"> 
	content를 넣는 공간 
	<constructor-arg ref="lgSpeaker"></constructor-arg>
	<constructor-arg 	value="100000"></constructor-arg> 
</bean> 
-->
<!-- 3. p를 이용한 객체관리 
<bean id="ltv" class="com.mire.biz.tv.LgTV"/> 
<bean id="stv" 	class="com.mire.biz.tv.SamsungTV" p:speaker-ref="sonySpeaker" p:price="110000"/> 
<bean id="sonySpeaker" class="com.mire.biz.tv.SonySpeaker" /> 
<bean id="lgSpeaker" class="com.mire.biz.tv.LgSpeaker" /> 
-->