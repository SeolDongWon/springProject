<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">

	<context:component-scan base-package="com.mire.biz"></context:component-scan>
	
 
	<aop:aspectj-autoproxy></aop:aspectj-autoproxy>
	
	<!--  DataSourc 등록 -->
	<context:property-placeholder location="classpath:db.properties"/>
	
	<bean id="dataSource" class="org.apache.tomcat.dbcp.dbcp2.BasicDataSource" destroy-method="close">
 		<property name="driverClassName" value="${jdbc.driverClassName}"/>
 		<property name="url"             value="${jdbc.url}"/>
 		<property name="username"        value="${jdbc.username}"/>
 		<property name="password"        value="${jdbc.password}"/>
 	</bean>	
 	<!-- Spring 과 JPA 연동설정  -->
 	<bean id="jpaVendorAdapter" class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter"></bean>
 	
 	<bean id="entityManagerFactoryBean" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
 		<property name="jpaVendorAdapter" ref="jpaVendorAdapter" />
 		<property name="dataSource" ref="dataSource" />
 	</bean>
	
	<!-- Spring 과 MyBatis 연동설정  -->
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionFactoryBean">
 		<property name="configLocation" value="classpath:sql-map-config.xml"/>
 		<property name="dataSource" ref="dataSource"/> 	
 	</bean>
 	
	<bean  class="org.mybatis.spring.SqlSessionTemplate">
 		<constructor-arg  name="sqlSessionFactory" ref="sqlSession"/>
 	</bean> 
	
	<!-- jdbcTemplate 등록 -->
	<bean class="org.springframework.jdbc.core.JdbcTemplate">
 		<property name="dataSource" ref="dataSource"/>
 	</bean>
	
	<!-- Transaction 설정 -->
 	<bean id="txManager" class="org.springframework.orm.jpa.JpaTransactionManager">
 		<property name="dataSource" ref="dataSource"/>
 	</bean>
 
	<tx:advice id="txAdvice" transaction-manager="txManager">
 		<tx:attributes>
 			<tx:method name="*" rollback-for="Exception"/>
 		</tx:attributes>
 	</tx:advice>
 	
 	<aop:config>
 		<aop:pointcut id="txPointcut" expression="execution(* com.mire.biz..*Impl.*(..))"/>
 		<aop:advisor pointcut-ref="txPointcut" advice-ref="txAdvice"/>
 	</aop:config>
 	
</beans>















<!-- 1. 생성자 IoC 
	<bean id="stv" class="com.mire.biz.tv.SamsungTV" > 

	<constructor-arg 
	ref="lgSpeaker"></constructor-arg> <constructor-arg value="100000"></constructor-arg> 
	</bean> 2. setter IoC <bean id="stv" class="com.mire.biz.tv.SamsungTV" > 
	<property name="speaker" ref="sonySpeaker"></property> <property name="price" 
	value="100000"></property> </bean> 3. 객체생성 <bean id="tv" class="com.mire.biz.tv.LgTV" 
	/> <bean id="stv" class="com.mire.biz.tv.SamsungTV" p:speaker-ref="sonySpeaker" 
	p:price="110000"/> <bean id="sonySpeaker" class="com.mire.biz.tv.SonySpeaker" 
	/> <bean id="lgSpeaker" class="com.mire.biz.tv.LgSpeaker" /> 
	
	4. 컬렉션프레임워크
	<bean id="collectionBean"
		class="com.mire.ioc.injection.CollectionBean">
		<property name="addressList">
			<list>
				<value>서울시 강남구 역삼동</value>
				<value>서울시 성동구 행당동</value>
			</list>
		</property>
		<property name="properties">
			<props>
				<prop key="name">홍길동</prop>
				<prop key="age">10</prop>
				<prop key="email">rlaeogus0911@nate.com</prop>
			</props>
		</property>
	</bean>
	
	5. aop
	<bean id="log" class="com.mire.biz.common.LogAdvice"></bean>
	<bean id="log2" class="com.mire.biz.common.LogAdvice2"></bean>
	<bean id="log3" class="com.mire.biz.common.AfterReturningAdvice"></bean>
	<bean id="log4" class="com.mire.biz.common.AfterThrowingAdvice"></bean>
	<bean id="log5" class="com.mire.biz.common.AroundAdvice"></bean>
	
	
	<aop:config>
		<aop:pointcut expression="execution(* com.mire.biz..*Impl.*(..) )" id="allPointcut"/>
		<aop:pointcut expression="execution(* com.mire.biz..*Impl.get*(..) )" id="getPointcut"/>
		
		<aop:aspect ref="log4">
			<aop:after-throwing method="afterThrowingLog"  pointcut-ref="allPointcut" 
			  throwing="exception"/>			
		</aop:aspect>
	</aop:config>
	-->